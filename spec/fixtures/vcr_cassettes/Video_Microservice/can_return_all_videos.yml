---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE-API-KEY>&maxResults=50&part=snippet&playlistId=PL2gVg27Uw-kcv9hsbiRXBQQGKg0h3k0kv
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 04 Jun 2020 02:08:04 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtTGlzdFJlc3BvbnNlIiwKICAiZXRhZyI6ICJ1OWphdlhmaDFMRDVoTUZlSWhTdE1xbmxCNEEiLAogICJpdGVtcyI6IFsKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ0QmQzVFdDTlV0WnpGRU45QnoyU2gzNDE4V3MiLAogICAgICAiaWQiOiAiVUV3eVoxWm5NamRWZHkxclkzWTVhSE5pYVZKWVFsRlJSMHRuTUdnemF6QnJkaTR5T0RsR05FRTBOa1JHTUVFek1FUXkiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNi0wMlQxNjowNzoxNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUN0Ym9QTkJvUkE2aFJWNTJlNG9OdUR3IiwKICAgICAgICAidGl0bGUiOiAiVW5XaW5kIFlvZ2EgRmxvdyBhbmQgTWVkaXRhdGlvbiB8IEZhaXRoIEh1bnRlciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkkgZGVzaWduZWQgdGhpcyBzaG9ydCByZWxheGluZyB5b2dhIHByYWN0aWNlIGZvciB5b3UgdG8gZG8gYXQgdGhlIGVuZCBvZiB0aGUgZGF5LCBvciBhcyBhIHdheSB0byBzaW1wbHkgVU5XSU5ELiBUaGUgcHJhY3RpY2UgZW5kcyB3aXRoIGxlZnQgbm9zdHJpbCBicmVhdGhpbmcgYW5kIG1lZGl0YXRpb24uIEZlZWwgZnJlZSB0byBzdGF5IGluIG1lZGl0YXRpb24gb3IgY2hpbGxheCBvbiB5b3VyIGJhY2suXG5cbk1vdmUgbWluZGZ1bGx5IGFuZCBFTkpPWSFcblxuX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX1xuXG5TdWJzY3JpYmUhIGh0dHA6Ly9iaXQubHkvMWFIZDZwMVxuXG5MZWFybiBtb3JlIGFib3V0IG1lIGFuZCBmb2xsb3c6XG5NeSBwZXJzb25hbCB3ZWJzaXRlOiBodHRwOi8vd3d3LmZhaXRoaHVudGVyLmNvbS9cbkluc3RhZ3JhbSBOYW1lOiBAc3Bpcml0dWFsbHlmbHkgXG5GYWNlYm9vazogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1NwaXJpdHVhbGx5Rmx5L1xuVHdpdHRlcjogaHR0cHM6Ly90d2l0dGVyLmNvbS9mYWl0aGh1bnRlcnlvZ2EiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9lNzNtcnhKVm5jby9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2U3M21yeEpWbmNvL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2U3M21yeEpWbmNvL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9lNzNtcnhKVm5jby9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2U3M21yeEpWbmNvL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJTdGVhZHkgTWluZCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEwyZ1ZnMjdVdy1rY3Y5aHNiaVJYQlFRR0tnMGgzazBrdiIsCiAgICAgICAgInBvc2l0aW9uIjogMCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiZTczbXJ4SlZuY28iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlRablBWcFRKTGxiM21obk9FNUpUYVJHbzRLOCIsCiAgICAgICJpZCI6ICJVRXd5WjFabk1qZFZkeTFyWTNZNWFITmlhVkpZUWxGUlIwdG5NR2d6YXpCcmRpNHdNVGN5TURoR1FVRTROVEl6TTBZNSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA2LTAyVDE2OjExOjQwWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3Rib1BOQm9SQTZoUlY1MmU0b051RHciLAogICAgICAgICJ0aXRsZSI6ICIxNSBNaW51dGUgR3VpZGVkIE1lZGl0YXRpb24gVG8gRmluZCBQZWFjZSBJbiBVbmNlcnRhaW4gVGltZXMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGlzIHNob3J0IGd1aWRlZCAxNSBtaW51dGUgbWVkaXRhdGlvbiBmb3IgYW54aWV0eSBhbmQgc3RyZXNzIGlzIHRoZSBwZXJmZWN0IHdheSB0byB3ZWxjb21lIHBlYWNlLCBiYWxhbmNlLCBhbmQgam95IGludG8geW91ciBsaWZlIGVzcGVjaWFsbHkgZHVyaW5nIHVuY2VydGFpbiB0aW1lcyBsaWtlIHRoZSBjdXJyZW50IENPVklEMTkgcGFuZGVtaWMuICBUaHJvdWdoIHRoZSBzaW1wbGUgYWN0IG9mIHJlY29ubmVjdGluZyB3aXRoIHlvdXIgaW5uZXIgc2VsZiwgdGhpcyBlYXN5IGd1aWRlZCBtZWRpdGF0aW9uIGlzIHBlcmZlY3QgZm9yIGFueW9uZSB0aGF0IGlzIG5lZWRpbmcgc29tZSBwb3NpdGl2aXR5IGFuZCBjYWxtIGR1cmluZyB0aGVzZSB1bmNlcnRhaW4gdGltZXMuIEl0IGlzIHRpbWUgdG8gbGV0IGdvIG9mIHRoZSBuZWdhdGl2aXR5LCBzdHJlc3MsIGFueGlldHkuLi4ud2hhdGV2ZXIgaXMgaG9sZGluZyB5b3UgYmFjayBpbiB5b3VyIGxpZmUuIExldCB0aGlzIGNsYXNzIHRha2UgeW91IG9uIGEgbWVkaXRhdGl2ZSBqb3VybmV5IHRvIGNsZWFuc2UgYW5kIGhlYWwgeW91cnNlbGYgZnJvbSB0aGUgaW5zaWRlIG91dC4gXG5cblNvIGZpbmQgYSBxdWlldCBzcGFjZSwgcHV0IHNvbWUgaGVhZHBob25lcyBvbiwgY2xvc2UgeW91ciBleWVzLCBhbmQgZW5qb3kuIFxuXG5FeGNsdXNpdmUgTWVtYmVyIFZpZGVvczogaHR0cHM6Ly93d3cucGF0cmVvbi5jb20vYm9ob2JlYXV0aWZ1bFxuTWVkaXRhdGlvbiwgWW9nYSwgJiBGaXRuZXNzIFByb2dyYW1zOiBodHRwczovL2JvaG9iZWF1dGlmdWwubGlmZS9vdXItc3RvcmUgXG5cbkhlbHAgVHJhbnNsYXRlIE91ciBWaWRlb3MgVG8gWW91ciBMYW5ndWFnZSBIZXJlOlxuaHR0cHM6Ly93d3cueW91dHViZS5jb20vdGltZWR0ZXh0X2NzX3BhbmVsP2M9VUNXTjJGUGx2ZzlyLUxuVXllcEg5SWFRJnRhYj0yXG5cbiNCb2hvQmVhdXRpZnVsICNHdWlkZWRNZWRpdGF0aW9uICNjb3ZpZDE5XG5cbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbkJvaG8gQmVhdXRpZnVsIGlzIGEgdHJhdmVsIHlvZ2EgbGlmZXN0eWxlIGNoYW5uZWwgdGhhdCBpcyBjcmVhdGluZyBwb3NpdGl2ZSBjb250ZW50IGZvciB5b3VyIGJvZHksIG1pbmQsIGFuZCB0aGUgZWFydGguIFlvZ2EsIFdhbmRlcmx1c3QsIEZpdG5lc3MsIFZlZ2FuIGZvb2QsIENvbnNjaW91cyBMaXZpbmcsIGFuZCBNZWRpdGF0aW9uIVxuXG5UaGFuayB5b3Ugc28gbXVjaCBmb3Igd2F0Y2hpbmcgYW5kIHN1YnNjcmliaW5nIHRvIG91ciBjaGFubmVsISBcbkNvbm5lY3QgV2l0aCBVcyFcblxuUGF0cmVvbjogaHR0cHM6Ly93d3cucGF0cmVvbi5jb20vYm9ob2JlYXV0aWZ1bFxuRmFjZWJvb2s6IGh0dHA6Ly9mYWNlYm9vay5jb20vYm9ob2JlYXV0aWZ1bGxpZmVcbkluc3RhZ3JhbS0gaHR0cDovL2luc3RhZ3JhbS5jb20vYm9ob2JlYXV0aWZ1bGxpZmVcblxuaHR0cHM6Ly93d3cuYm9ob2JlYXV0aWZ1bC5saWZlXG5cbuKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlFxuXG5ESVNDTEFJTUVSOlxuUGxlYXNlIGNvbnN1bHQgeW91ciBkb2N0b3IgYmVmb3JlIHN0YXJ0aW5nIGFueSBkaWV0IG9yIGV4ZXJjaXNlIHByb2dyYW0uIEJ5IHVzaW5nIG91ciB2aWRlb3MsIHlvdSB1bmRlcnN0YW5kIGFuZCBhZ3JlZSB0aGF0IG5laXRoZXIgQm9obyBCZWF1dGlmdWwgTHRkLiBub3IgYW55IHBlcnNvbnMgYXNzb2NpYXRlZCB3aXRoIGl0IGhhdmUgYW55IGxpYWJpbGl0eSB0byB5b3UgZm9yIGFueSBpbmp1cnkgb3IgbG9zcyB5b3UgbWF5IHN1ZmZlciBpbiBjb25uZWN0aW9uIHdpdGggYW55IGNvbnRlbnQgd2UgbWF5IHBvc3QuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVzE5UGRzbFc3aXcvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XMTlQZHNsVzdpdy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XMTlQZHNsVzdpdy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVzE5UGRzbFc3aXcvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9XMTlQZHNsVzdpdy9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiU3RlYWR5IE1pbmQiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMMmdWZzI3VXcta2N2OWhzYmlSWEJRUUdLZzBoM2swa3YiLAogICAgICAgICJwb3NpdGlvbiI6IDEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIlcxOVBkc2xXN2l3IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ3cG1QU2VIWmlRd3pNbUU1a0tvR2tjTHljLVEiLAogICAgICAiaWQiOiAiVUV3eVoxWm5NamRWZHkxclkzWTVhSE5pYVZKWVFsRlJSMHRuTUdnemF6QnJkaTQxTWpFMU1rSTBPVFEyUXpKR056TkciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNi0wMlQxNjoxMjozNFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUN0Ym9QTkJvUkE2aFJWNTJlNG9OdUR3IiwKICAgICAgICAidGl0bGUiOiAiTG92aW5nIEtpbmRuZXNzIE1lZGl0YXRpb24gdG8gRGV2ZWxvcCBNaW5kZnVsbmVzcyBhbmQgQ29tcGFzc2lvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogImh0dHBzOi8vd3d3Lndpc2VtaW5kYm9keS5jb20gVGhpcyBpcyBhIExvdmluZyBLaW5kbmVzcyBNZWRpdGF0aW9uIHRoYXQgd2lsbCBoZWxwIHlvdSBkZXZlbG9wIG1pbmRmdWxuZXNzIGFuZCBjb21wYXNzaW9uIGZvciB5b3VyIHNlbGYgYW5kIG90aGVycy4gTG92aW5nIEtpbmRuZXNzIE1lZGl0YXRpb24gaXMgcHJvdmVuIHRvIHJlbGlldmUgYW54aWV0eSBhbmQgc3RyZXNzIGFuZCB0byBpbmNyZWFzZSBmZWVsaW5ncyBvZiB3ZWxsYmVpbmcuIEkgaG9wZSB5b3UgZW5qb3kgdGhpcyBtZWRpdGF0aW9uLiBcblxuRG93bmxvYWQgYSBmcmVlIGd1aWRlZCBtaW5kZnVsbmVzcyBtZWRpdGF0aW9uIGF0IGh0dHBzOi8vd3d3Lndpc2VtaW5kYm9keS5jb20vXG5cbmh0dHA6Ly9mYWNlYm9vay5jb20vd2lzZW1pbmRib2R5IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvLWRfQUE5SDR6OVUvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tZF9BQTlINHo5VS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tZF9BQTlINHo5VS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvLWRfQUE5SDR6OVUvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJTdGVhZHkgTWluZCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEwyZ1ZnMjdVdy1rY3Y5aHNiaVJYQlFRR0tnMGgzazBrdiIsCiAgICAgICAgInBvc2l0aW9uIjogMiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiLWRfQUE5SDR6OVUiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIk9fNGtSaHpQVEpxRFdaTUUwaDhrVmo3TGVmRSIsCiAgICAgICJpZCI6ICJVRXd5WjFabk1qZFZkeTFyWTNZNWFITmlhVkpZUWxGUlIwdG5NR2d6YXpCcmRpNHdPVEEzT1RaQk56VkVNVFV6T1RNeSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA2LTAyVDE2OjE1OjQ2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3Rib1BOQm9SQTZoUlY1MmU0b051RHciLAogICAgICAgICJ0aXRsZSI6ICIyMCBtaW4gRnVsbCBCb2R5IFNUUkVUQ0gvWU9HQSBmb3IgU1RSRVNTICYgQU5YSUVUWSBSZWxpZWYiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJEZS1zdHJlc3Mgd2l0aCB0aGlzIDIwIG1pbnV0ZSBjYWxtaW5nIHlvZ2Egcm91dGluZSB0aGF0IGluY2x1ZGVzIGxpZ2h0IGFuZCBlYXN5IGZ1bGwgYm9keSBzdHJldGNoZXMgZm9yIHN0cmVzcyByZWxpZWYgYW5kIGFueGlldHkuXG5cbuKtkO+4j1NIT1AgTVkgQ09PS0JPT0tTITogaHR0cHM6Ly9nb28uZ2wvWEh3VUpnIOKtkO+4j1xuXG7irZDvuI9ETyBUSElTIFdBUk0gVVAgRklSU1Q6IGh0dHA6Ly9iaXQubHkvMnJpdjhUNlxu4q2Q77iPRE8gVEhJUyBDT09MIERPV04gQUZURVI6IGh0dHA6Ly9iaXQubHkvMllPNTVQUFxuXG7wn5GJ8J+PvFNVQlNDUklCRSBUTyBNWSBNQUlOIENIQU5ORUwgKHdoYXQgaSBlYXQsIHJlY2lwZXMsIHZsb2dzKTogaHR0cHM6Ly9nb28uZ2wvV1RwRFFrXG5cbvCfk7cgR0VBUiBJIFVTRTogXG7wn5GJ8J+PvFRIRSBNQVQgSSBVU0UgKEV4ZXJjaXNlIDZYNCk6IGh0dHA6Ly9nb3JpbGxhbWF0cy5jb20/YWZmPTE5ICAoTUFERklUMTAgZm9yIDEwJSBvZmYpXG5DQU1FUkE6IGh0dHBzOi8vZ29vLmdsL3JWUXpYZFxuNDIuNW1tIExFTlM6IGh0dHBzOi8vZ29vLmdsL29MUmMydVxuVFJJUE9EOiBodHRwczovL2dvby5nbC9paHA1YnJcbk1JQ1JPUEhPTkU6IGh0dHBzOi8vZ29vLmdsL2ZQemtSTlxuR09QUk86IGh0dHBzOi8vZ29vLmdsL0Q2ZU13TFxuXG7inJggSSBOIFMgVCBBIEcgUiBBIE06IEBtYWRmaXQuaWdcbuKcmCBUIFcgSSBUIFQgRSBSOiBAbWFkZGllbHltYnVybmVyXG7inJggRiBBIEMgRSBCIE8gTyBLOiBmYWNlYm9vay5jb20vbWFkZml0LmlnXG7inIkgQyBPIE4gVCBBIEMgVCAoYnVzaW5lc3MgaW5xdWlyaWVzKTogbWFkZml0OTVAZ21haWwuY29tIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvc1RBTmlvXzJFMFEvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zVEFOaW9fMkUwUS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zVEFOaW9fMkUwUS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvc1RBTmlvXzJFMFEvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9zVEFOaW9fMkUwUS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiU3RlYWR5IE1pbmQiLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMMmdWZzI3VXcta2N2OWhzYmlSWEJRUUdLZzBoM2swa3YiLAogICAgICAgICJwb3NpdGlvbiI6IDMsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInNUQU5pb18yRTBRIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJibWduUFlGdmRXYkFoYWtqNnh3ZS0wNUJBUDAiLAogICAgICAiaWQiOiAiVUV3eVoxWm5NamRWZHkxclkzWTVhSE5pYVZKWVFsRlJSMHRuTUdnemF6QnJkaTR4TWtWR1FqTkNNVU0xTjBSRk5FVXgiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAyMC0wNi0wMlQxNjoxNzoxMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUN0Ym9QTkJvUkE2aFJWNTJlNG9OdUR3IiwKICAgICAgICAidGl0bGUiOiAiWW9nYSBGbG93IHRvIEJvb3N0IEVuZXJneSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkdldCBhIGJvb3N0IG9mIGVuZXJneSB0byBnZXQgeW91IHRocm91Z2ggdGhlIHJlc3Qgb2YgeW91ciBkYXkgd2l0aCB0aGlzIDEwLW1pbnV0ZSB5b2dhIGZsb3chIFRoaXMgeW9nYSBjbGFzcyBmb3IgYmVnaW5uZXJzIG9mZmVycyBhIHRvdGFsIGJvZHkgd2FybSB1cCB0aGF0IGlzIGFjY2Vzc2libGUgZm9yIG1vc3Qgc3R1ZGVudHMuIFxuXG5Eb25hdGlvbnMgYXBwcmVjaWF0ZWQ6IFxuUGF5UGFsOiBlcmljYXJhc2NvbkRSV1lcblZlbm1vOiBFcmljYS1SYXNjb24tMVxuQ2FzaEFwcDogTXNFcmljYURKUlxuXG5UYWtlIENVU1RPTUlaRUQgT05MSU5FIFlPR0EgQ0xBU1NFUyB3aXRoIG1lISBcbmh0dHBzOi8vYml0Lmx5LzM4VFc2QW8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96c0M4YnQ3a3Ytdy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pzQzhidDdrdi13L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pzQzhidDdrdi13L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96c0M4YnQ3a3Ytdy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlN0ZWFkeSBNaW5kIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDJnVmcyN1V3LWtjdjloc2JpUlhCUVFHS2cwaDNrMGt2IiwKICAgICAgICAicG9zaXRpb24iOiA0LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJ6c0M4YnQ3a3YtdyIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAidWthT3ZTaU50OWNXTXdqSUFWYmdtVklOdWR3IiwKICAgICAgImlkIjogIlVFd3laMVpuTWpkVmR5MXJZM1k1YUhOaWFWSllRbEZSUjB0bk1HZ3phekJyZGk0MU16SkNRakJDTkRJeVJrSkROMFZEIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMjAtMDYtMDJUMTY6MjA6NDNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDdGJvUE5Cb1JBNmhSVjUyZTRvTnVEdyIsCiAgICAgICAgInRpdGxlIjogIjUtTWludXRlIE1lZGl0YXRpb24gWW91IENhbiBEbyBBbnl3aGVyZSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkluIGp1c3QgNSBtaW51dGVzIHlvdSBjYW4gcmVzZXQgeW91ciBkYXkgaW4gYSBwb3NpdGl2ZSB3YXkuXG5cblNwZWNpYWwgdGhhbmtzIHRvIEpvaG4gRGF2aXNpIGZvciBsZW5kaW5nIHVzIGhpcyBpbmNyZWRpYmx5IHNvb3RoaW5nIHZvaWNlLiBodHRwczovL3d3dy5qb2huZGF2aXNpLmNvbS8iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pbnBvazRNS1ZMTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2lucG9rNE1LVkxNL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2lucG9rNE1LVkxNL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pbnBvazRNS1ZMTS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2lucG9rNE1LVkxNL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJTdGVhZHkgTWluZCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEwyZ1ZnMjdVdy1rY3Y5aHNiaVJYQlFRR0tnMGgzazBrdiIsCiAgICAgICAgInBvc2l0aW9uIjogNSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiaW5wb2s0TUtWTE0iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkhqUGk5ZmN4aWVUY3dGdnZ2aEtScHhCdzdmayIsCiAgICAgICJpZCI6ICJVRXd5WjFabk1qZFZkeTFyWTNZNWFITmlhVkpZUWxGUlIwdG5NR2d6YXpCcmRpNURRVU5FUkRRMk5rSXpSVVF4TlRZMSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA2LTAyVDE2OjIyOjQ2WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3Rib1BOQm9SQTZoUlY1MmU0b051RHciLAogICAgICAgICJ0aXRsZSI6ICJUaGUgTWFnaWMgb2YgTm90IEdpdmluZyBhIEYqKiogfCBTYXJhaCBLbmlnaHQgfCBURUR4Q29jb251dEdyb3ZlIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiV2FybmluZzogU3Ryb25nIExhbmd1YWdlXG5cblRoZSBiZXN0c2VsbGluZyBhdXRob3Igb2YgVGhlIExpZmUtQ2hhbmdpbmcgTWFnaWMgb2YgTm90IEdpdmluZyBhIEYqY2sgYW5kIEdldCBZb3VyIFNoKnQgVG9nZXRoZXIsIFNhcmFoIEtuaWdodCwgb3V0bGluZXMgaGVyIFwiTm90U29ycnkgTWV0aG9kXCIgdG8gc3RvcCBzcGVuZGluZyB0aW1lIHlvdSBkb24ndCBoYXZlIGRvaW5nIHRoaW5ncyB5b3UgZG9uJ3Qgd2FudCB0byBkbyBpbiBoZXJcbmh1bW9yb3VzIHRhbGsuXG5cbkFmdGVyIGZpZnRlZW4geWVhcnMgd29ya2luZyBpbiBOZXcgWW9yayBDaXR5J3MgdG9wIHB1Ymxpc2hpbmcgaG91c2VzLFNhcmFoIEtuaWdodCBzdHJ1Y2sgb3V0IG9uIGhlciBvd24uIFNpbmNlIHRoZW4sIGhlciBlc3NheSBcIkkgUXVpdCBNeSBKb2JUb2RheSAoQW5kIFNvIENhbiBZb3UhKVwiLSB3ZW50IHZpcmFsLCBhbmQgaGVyIGJvb2ssIFwiVGhlIExpZmUtQ2hhbmdpbmcgTWFnaWMgb2YgTm90IEdpdmluZyBhIEYqY2s6IEhvdyB0byBTdG9wIFNwZW5kaW5nIFRpbWUgWW91IERvbid0IEhhdmUgd2l0aCBQZW9wbGUgWW91IERvbid0IExpa2UgRG9pbmcgVGhpbmdzIFlvdSBEb24ndCBXYW50IHRvIERvXCIsIGJlY2FtZSBhIGJlc3RzZWxsZXIuIFRoZSBlc2NhcGUgZnJvbSBjb3Jwb3JhdGUgbGlmZSBhbmQgdHJhbnNmb3JtYXRpb24gaW50byBhbiBcImFjY2lkZW50YWwgYW50aS1ndXJ1XCIgY29udGludWVkIHdoZW4gc2hlIGFuZCBoZXIgaHVzYmFuZCBtb3ZlZCB0byBMYXMgVGVycmVuYXMsIERvbWluaWNhbiBSZXB1YmxpYy4gU2FyYWgncyBuZXcgYm9vayBleHBsYWlucyBob3cgdG8gXCJHZXQgWW91ciBTaGl0IFRvZ2V0aGVyOiBIb3cgdG8gU3RvcCBXb3JyeWluZyBBYm91dCBXaGF0IFlvdSBTaG91bGQgRG8gU28gWW91IENhbiBGaW5pc2ggV2hhdCBZb3UgTmVlZCB0byBEbyBhbmQgU3RhcnQgRG9pbmcgV2hhdCBZb3UgV2FudCB0byBEby5cIiBTYXJhaCBncmFkdWF0ZWQgY3VtIGxhdWRlIHdpdGggYSBkZWdyZWUgaW4gRW5nbGlzaCBhbmQgQW1lcmljYW4gTGl0ZXJhdHVyZSBmcm9tXG5IYXJ2YXJkIFVuaXZlcnNpdHkuXG5cblRoaXMgdGFsayB3YXMgZ2l2ZW4gYXQgYSBURUR4IGV2ZW50IHVzaW5nIHRoZSBURUQgY29uZmVyZW5jZSBmb3JtYXQgYnV0IGluZGVwZW5kZW50bHkgb3JnYW5pemVkIGJ5IGEgbG9jYWwgY29tbXVuaXR5LiBMZWFybiBtb3JlIGF0IGh0dHA6Ly90ZWQuY29tL3RlZHgiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9Hd1J6akZRYV9PZy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d3UnpqRlFhX09nL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d3UnpqRlFhX09nL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9Hd1J6akZRYV9PZy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0d3UnpqRlFhX09nL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJTdGVhZHkgTWluZCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEwyZ1ZnMjdVdy1rY3Y5aHNiaVJYQlFRR0tnMGgzazBrdiIsCiAgICAgICAgInBvc2l0aW9uIjogNiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiR3dSempGUWFfT2ciCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjBqRFZTRU9QdGw4OFdIandVamJLSXJQM1ZGSSIsCiAgICAgICJpZCI6ICJVRXd5WjFabk1qZFZkeTFyWTNZNWFITmlhVkpZUWxGUlIwdG5NR2d6YXpCcmRpNDVORGsxUkVaRU56aEVNelU1TURReiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA2LTAyVDE2OjIzOjIxWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3Rib1BOQm9SQTZoUlY1MmU0b051RHciLAogICAgICAgICJ0aXRsZSI6ICJUaGUgUG93ZXIgb2YgTWluZGZ1bG5lc3M6IFdoYXQgWW91IFByYWN0aWNlIEdyb3dzIFN0cm9uZ2VyIHwgU2hhdW5hIFNoYXBpcm8gfCBURUR4V2FzaGluZ3RvblNxdWFyZSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBkbyB3ZSBjaGFuZ2U/IEluIHRoaXMgcGlvbmVlcmluZyB0YWxrLCBEci4gU2hhdW5hIFNoYXBpcm8gZHJhd3Mgb24gbW9kZXJuIG5ldXJvc2NpZW5jZSBhbmQgYW5jaWVudCB3aXNkb20gdG8gZGVtb25zdHJhdGUgaG93IG1pbmRmdWxuZXNzIGNhbiBoZWxwIHVzIG1ha2UgcG9zaXRpdmUgY2hhbmdlcyBpbiBvdXIgYnJhaW5zIGFuZCBvdXIgbGl2ZXMuIFxyXG5cclxuRWRpdGVkIGJ5IEtldmluIFJhbWFuIGFuZCBQcmVzdG9uIFlldW5nLiAgIFxuXG5TSEFVTkEgU0hBUElSTywgUGhELCBpcyBhIHByb2Zlc3NvciBhdCBTYW50YSBDbGFyYSBVbml2ZXJzaXR5LCBhIGNsaW5pY2FsIHBzeWNob2xvZ2lzdCwgYW5kIGFuIGludGVybmF0aW9uYWxseSByZWNvZ25pemVkIGV4cGVydCBpbiBtaW5kZnVsbmVzcy4gRHIuIFNoYXBpcm8gaXMgdGhlIHJlY2lwaWVudCBvZiB0aGUgQW1lcmljYW4gQ291bmNpbCBvZiBMZWFybmVkIFNvY2lldGllcyB0ZWFjaGluZyBhd2FyZCwgYWNrbm93bGVkZ2luZyBoZXIgb3V0c3RhbmRpbmcgY29udHJpYnV0aW9ucyB0byBlZHVjYXRpb247IGFuZCBpcyBhIGZlbGxvdyBvZiB0aGUgTWluZCBhbmQgTGlmZSBJbnN0aXR1dGUgY28tZm91bmRlZCBieSB0aGUgRGFsYWkgTGFtYS4gRHIuIFNoYXBpcm8gbGVjdHVyZXMgYW5kIGxlYWRzIG1pbmRmdWxuZXNzIHByb2dyYW1zIGludGVybmF0aW9uYWxseSwgc2VydmVzIG9uIHRoZSBBZHZpc29yeSBCb2FyZCBvZiBBeGlhbGVudCBhIGxlYWRlciBvbiBDb25zY2lvdXMgQnVzaW5lc3MsIGFuZCBoYXMgYnJvdWdodCBtaW5kZnVsbmVzcyB0byBwaW9uZWVyaW5nIGNvbXBhbmllcyBpbmNsdWRpbmcgQ2lzY28gU3lzdGVtcyBhbmQgR29vZ2xlLiBTaGUgaGFzIHB1Ymxpc2hlZCBvdmVyIDE1MCBhcnRpY2xlcyBhbmQgYm9vayBjaGFwdGVycyBhbmQgaXMgY28tYXV0aG9yIG9mIFRoZSBBcnQgYW5kIFNjaWVuY2Ugb2YgTWluZGZ1bG5lc3MgYW5kIE1pbmRmdWwgRGlzY2lwbGluZTogQSBsb3ZpbmcgYXBwcm9hY2ggdG8gcmFpc2luZyBhbiBlbW90aW9uYWxseSBpbnRlbGxpZ2VudCBjaGlsZC4gZHJzaGF1bmFzaGFwaXJvLmNvbVxuXG5UaGlzIHRhbGsgd2FzIGdpdmVuIGF0IGEgVEVEeCBldmVudCB1c2luZyB0aGUgVEVEIGNvbmZlcmVuY2UgZm9ybWF0IGJ1dCBpbmRlcGVuZGVudGx5IG9yZ2FuaXplZCBieSBhIGxvY2FsIGNvbW11bml0eS4gTGVhcm4gbW9yZSBhdCBodHRwczovL3d3dy50ZWQuY29tL3RlZHgiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9JZWJsSmRCMi1Wby9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0llYmxKZEIyLVZvL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0llYmxKZEIyLVZvL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9JZWJsSmRCMi1Wby9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0llYmxKZEIyLVZvL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJTdGVhZHkgTWluZCIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEwyZ1ZnMjdVdy1rY3Y5aHNiaVJYQlFRR0tnMGgzazBrdiIsCiAgICAgICAgInBvc2l0aW9uIjogNywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiSWVibEpkQjItVm8iCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIkIzanlKQU95dkxWM3dTMjlqemkzR3FYX09LZyIsCiAgICAgICJpZCI6ICJVRXd5WjFabk1qZFZkeTFyWTNZNWFITmlhVkpZUWxGUlIwdG5NR2d6YXpCcmRpNUdOak5EUkRSRU1EUXhPVGhDTURRMiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDIwLTA2LTAyVDE2OjI3OjE1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ3Rib1BOQm9SQTZoUlY1MmU0b051RHciLAogICAgICAgICJ0aXRsZSI6ICJMaXZpbmcgd2l0aG91dCBzaGFtZTogSG93IHdlIGNhbiBlbXBvd2VyIG91cnNlbHZlcyB8IFdoaXRuZXkgVGhvcmUgfCBURUR4R3JlZW5zYm9ybyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBkbyB3ZSBoYW5kbGUgc2VsZi1wZXJjZXB0aW9uIHdoZW4gb3VyIGJvZGllcyBkb24ndCBtYXRjaCB0aGUgaWRlYWwgc29jaWFsIGltYWdlPyBUaGUgYW5zd2VyIGlzIHRvIGZpbmQgYSB3YXkgdG8gbGl2ZSB3aXRob3V0IHNoYW1lLlxuXG5HcmVlbnNib3JvIG5hdGl2ZSBhbmQgZGFuY2VyLCB3aG9zZSB2aXJhbCB2aWRlbywgXCJBIEZhdCBHaXJsIERhbmNpbmcsXCIgc3BhcmtlZCBhIG5hdGlvbmFsIGNvbnZlcnNhdGlvbiBhYm91dCBib2R5IGltYWdlLiBTaGUgaGFzIGxhdW5jaGVkIHRoZSBObyBCb2R5IFNoYW1lIENhbXBhaWduIC0tIGEgbmF0aW9uYWwgZWZmb3J0IHRvIGhlbHAgbWVuIGFuZCB3b21lbiBvZiBldmVyeSB2YXJpZXR5IGxpdmUgYW5kIGxvdmUgdGhlaXIgbGl2ZXMgd2l0aG91dCBzaGFtZS4gU2hlIG5vdyBoYXMgaGVyIG93biByZWFsaXR5IHNob3csIE15IEJpZyBGYXQgRmFidWxvdXMgTGlmZSwgKGJyb2FkY2FzdCBieSB0aGUgVExDIG5ldHdvcmspIHRoYXQgZGVtb25zdHJhdGVzIGhlciBzdWNjZXNzIGluICBoZXIgb3duIHBlcnNvbmFsIGpvdXJuZXkgdG93YXJkIGEgcG9zaXRpdmUgc2VsZi1pbWFnZS5cblxuVGhpcyB0YWxrIHdhcyBnaXZlbiBhdCBhIFRFRHggZXZlbnQgdXNpbmcgdGhlIFRFRCBjb25mZXJlbmNlIGZvcm1hdCBidXQgaW5kZXBlbmRlbnRseSBvcmdhbml6ZWQgYnkgYSBsb2NhbCBjb21tdW5pdHkuIExlYXJuIG1vcmUgYXQgaHR0cDovL3RlZC5jb20vdGVkeCIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2FhWEJZY2ZWWVpNL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYWFYQlljZlZZWk0vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYWFYQlljZlZZWk0vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2FhWEJZY2ZWWVpNL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvYWFYQlljZlZZWk0vbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlN0ZWFkeSBNaW5kIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDJnVmcyN1V3LWtjdjloc2JpUlhCUVFHS2cwaDNrMGt2IiwKICAgICAgICAicG9zaXRpb24iOiA4LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJhYVhCWWNmVllaTSIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwYWdlSW5mbyI6IHsKICAgICJ0b3RhbFJlc3VsdHMiOiA5LAogICAgInJlc3VsdHNQZXJQYWdlIjogNTAKICB9Cn0K
  recorded_at: Thu, 04 Jun 2020 02:08:04 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE-API-KEY>&maxResults=50&part=snippet&playlistId=PL2gVg27Uw-kcsCzSgn8Hufs4QKWdARfuv
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 04 Jun 2020 02:08:04 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jun 2020 02:08:04 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE-API-KEY>&maxResults=50&part=snippet&playlistId=PL2gVg27Uw-kfUnyNb_OHdvjBvv4tJRjPw
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Thu, 04 Jun 2020 02:08:05 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 04 Jun 2020 02:08:05 GMT
recorded_with: VCR 6.0.0

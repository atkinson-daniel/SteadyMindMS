---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE-API-KEY>&maxResults=50&part=snippet&playlistId=PL2gVg27Uw-kcv9hsbiRXBQQGKg0h3k0kv
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 03 Jun 2020 21:26:09 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443"; ma=2592000,h3-Q050=":443";
        ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443";
        ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 03 Jun 2020 21:26:09 GMT
recorded_with: VCR 6.0.0
